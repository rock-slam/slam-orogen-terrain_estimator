name 'terrain_estimator'
version '0.1'

using_library "terrain_estimator" 

using_library "asguard"

import_types_from 'base'
import_types_from 'sysmon'
import_types_from "hbridge"
import_types_from 'torque_estimator' 
import_types_from "asguard/BodyState.hpp"
import_types_from "asguard/Configuration.hpp"

import_types_from "TerrainTypes.hpp"

task_context 'Task' do
    needs_configuration


    ##########################
    # parameters
    ##########################
    
    property('slip_threashold', 'double',0.005).
	doc 'the threashold of the relative movement between the axis that indicates a slip'

    
    property('terrain_type', '/terrain_estimator/TerrainType').
	doc 'the type of terrain used in the learning process'
    
    property('numb_bins', 'int ',16).
	doc 'the number of bins'
    property('histogram_max_torque', 'double',0).
	doc 'the histogram upper limit'
    property('histogram_min_torque', 'double',-60).
	doc 'the histogram lower limit'
    property('number_of_histogram', 'int',5).
	doc 'the number of histograms needed for a terrain classification'
    
    ##########################
    # aggregator parameters
    ##########################

    stream_aligner() do
	align_port("motor_status", 0.001)
	align_port("ground_forces_estimated", 0.001)
	align_port("orientation_samples", 0.01)
	max_latency(0.05)
    end

    ##########################
    # i/o ports 
    ##########################

    input_port('motor_status', '/base/actuators/Status').
        needs_reliable_connection.
	doc 'timestamped asguard bodystate information'

    input_port("ground_forces_estimated", "torque_estimator/GroundForces").
        doc("Estimated ground force values")
  
    input_port("status", "base/actuators/Status").
        doc("Status of all hbridges. A data connection type is recommended").
        needs_buffered_connection
  

    input_port('orientation_samples', '/base/samples/RigidBodyState').
      doc("timestamped orientation readings").
      needs_buffered_connection


    output_port('histogram_terrain_classification', '/terrain_estimator/TerrainClassificationHistogram')

    output_port('debug_slip_detection', '/terrain_estimator/DebugSlipDetection')

    output_port('slip_detected', '/terrain_estimator/SlipDetected')
    
        

    port_driven 
end


deployment "test_terrain_estimator" do
    do_not_install
    terrain_estimator_task = task("terrain_estimator", "Task")
    
    add_default_logger
    if !corba_enabled?
        browse odometry_task
    end
end

